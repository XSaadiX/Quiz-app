# 📝 Quiz App Assignment
## 🎯 Objective
Build a ** Quiz App** using **OOP principles in JavaScript** (ES6 classes).  
The app displays **all questions at once**, allows users to **reset answers**, and shows a **final score with pass/fail feedback** when submitted.  
The quiz uses **localStorage** to persist answers during an active attempt, but starts fresh after finishing.

---

## 🚀 Live Demo
Open `index.html` in your browser to run the application.

---

## 📁 Project Structure
```
quiz-app/
├── index.html              # Main HTML file with embedded CSS/JS
├── README.md              # This file
├── technical-requirements.md  # Detailed technical specifications
├── class-diagram.png      # Class relationship diagram
└── screenshots/           # App screenshots
    ├── quiz-interface.png
    ├── progress-tracking.png
    └── results-screen.png
```

---

## 🏗️ Architecture Overview

### Object-Oriented Design
The application implements four main classes demonstrating core OOP principles:

#### 1. **Question (Base Class)**
- Abstract base class defining common question functionality
- Properties: `id`, `text`, `options`, `correctAnswer`, `selectedAnswer`
- Methods: `isCorrect()`, `setAnswer()`, `resetAnswer()`, `render()`

#### 2. **MultipleChoiceQuestion (extends Question)**
- Handles multiple-choice questions with 3-4 options
- Demonstrates **Inheritance** by extending Question class
- Implements **Polymorphism** by overriding render() method

#### 3. **TrueFalseQuestion (extends Question)**
- Handles boolean True/False questions
- Demonstrates **Inheritance** and **Polymorphism**
- Automatically sets options to ['True', 'False']

#### 4. **Quiz**
- Manages overall quiz state and functionality
- Demonstrates **Encapsulation** with private-like properties
- Handles scoring, persistence, and validation

#### 5. **QuizApp (UI Controller)**
- Manages user interface and DOM manipulation
- Coordinates between Quiz logic and user interactions
- Handles event binding and state updates

---

## 🎨 Features Implemented

### ✅ Core Requirements
- [x] Display all questions at once
- [x] Single answer selection per question
- [x] Reset functionality to clear all answers
- [x] Submit button with final score display
- [x] Pass/fail determination (70% threshold)
- [x] localStorage persistence during active attempts
- [x] Fresh start after quiz completion

### ✅ OOP Principles
- [x] **Inheritance**: Question subclasses extend base class
- [x] **Polymorphism**: Different render() implementations per question type
- [x] **Encapsulation**: Private-like properties with public method interfaces
- [x] **Abstraction**: Base Question class defines common interface

### ✅ Enhanced Features
- [x] Real-time progress tracking with visual progress bar
- [x] Answer counter showing completed vs total questions
- [x] Responsive design for mobile and desktop
- [x] Smooth animations and hover effects
- [x] Confirmation dialogs for destructive actions
- [x] Visual feedback for selected answers
- [x] Gradient backgrounds and modern UI design

---

## 📱 User Interface

### Quiz Interface
- **Header**: Title, description, and control buttons
- **Progress Bar**: Visual completion indicator with percentage
- **Question Cards**: Individual cards for each question with hover effects
- **Navigation**: Reset and Submit buttons with state management

### Results Screen  
- **Score Display**: Large, prominent score presentation
- **Pass/Fail Indicator**: Color-coded feedback with icons
- **Percentage**: Detailed performance breakdown
- **Retake Option**: Button to start a new attempt

---

## 🛠️ Technical Implementation

### DOM Manipulation
- Dynamic question rendering without HTML templates
- Real-time UI updates for progress tracking
- CSS class manipulation for visual state changes
- Event delegation for efficient event handling

### State Management
- localStorage integration for persistence
- Automatic state saving after each answer
- State restoration on page refresh (if not completed)
- Clean state management with proper cleanup

### Responsive Design
- Mobile-first approach with CSS media queries
- Flexible layouts using CSS Grid and Flexbox
- Touch-friendly interface elements
- Accessibility considerations with proper contrast

---

## 📊 Question Content

### Question Types
- **Multiple Choice**: 8 questions with 4 options each
- **True/False**: 4 questions with boolean answers

### Topics Covered
- JavaScript fundamentals and syntax
- Web development concepts
- HTML and CSS knowledge
- HTTP and JSON understanding
- Programming best practices

### Sample Questions
1. "What is the capital of France?" (Multiple Choice)
2. "JavaScript is a compiled language." (True/False)
3. "Which method adds an element to array end?" (Multiple Choice)
4. "CSS stands for Cascading Style Sheets." (True/False)

---

## 🎯 Scoring System

### Assessment Logic
- **Total Questions**: 12
- **Pass Threshold**: 70% (9 out of 12 correct)
- **Scoring**: 1 point per correct answer
- **Result Display**: Score fraction, percentage, and pass/fail status

### Validation
- All questions must be answered before submission
- Real-time validation with button state management
- Clear feedback for incomplete attempts

---

## 💾 Data Persistence

### localStorage Implementation
```javascript
// Storage structure
{
  answers: [
    { id: 1, selectedAnswer: "Paris" },
    { id: 2, selectedAnswer: "False" }
  ],
  isCompleted: false
}
```

### Persistence Rules
- Save state after each answer selection
- Restore state on page refresh (if quiz not completed)
- Clear storage upon quiz completion or reset
- Validate stored data integrity

---

## 🧪 Testing

### Manual Testing Checklist
- [ ] All questions display correctly
- [ ] Answer selection works for all question types  
- [ ] Progress bar updates in real-time
- [ ] Reset button clears all answers and storage
- [ ] Submit validation prevents incomplete submissions
- [ ] Score calculation is accurate
- [ ] Pass/fail determination works correctly
- [ ] localStorage persistence across page refreshes
- [ ] Fresh start after quiz completion
- [ ] Responsive design on mobile devices

---

## 🚀 Getting Started

### Prerequisites
- Modern web browser with ES6+ support
- No additional dependencies or build tools required

### Installation
1. Clone or download the repository
2. Open `index.html` in your web browser
3. Start taking the quiz!

### Usage
1. **Answer Questions**: Click radio buttons to select answers
2. **Track Progress**: Monitor completion via progress bar
3. **Reset if Needed**: Use "Reset All" to start over
4. **Submit Quiz**: Click "Submit Quiz" when all questions answered
5. **View Results**: See score, percentage, and pass/fail status
6. **Retake**: Click "Take Quiz Again" for a new attempt

---

## 📈 Performance Optimizations
- Minimal DOM queries through efficient element caching
- CSS transitions for smooth user interactions
- Lazy event binding for better memory management
- Optimized localStorage operations

---

## 🎨 Design Principles
- **Clean Code**: Readable, well-commented, and structured
- **User Experience**: Intuitive interface with clear feedback
- **Accessibility**: Semantic HTML and proper ARIA labels
- **Performance**: Efficient DOM manipulation and event handling

---

## 🔧 Future Enhancements
- Question categories and difficulty levels
- Timer functionality for timed quizzes
- Multiple quiz templates
- Result history and analytics
- Question randomization
- Import/export quiz data

---

### Best Practices Applied
- ES6+ modern JavaScript features
- Consistent naming conventions
- Error handling and validation
- Documentation and comments
- Responsive design patterns

